
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/project.h.in ${GENERATED_SOURCE_DIR}/project.h)

INCLUDE(source_groups.cmake)

SET(DEF_OUT_FILES)
FOREACH(file ${file_root_def_files})
	FILE(RELATIVE_PATH FILE_NAME ${CMAKE_CURRENT_SOURCE_DIR} ${file})
	
	SET(OUTPUT "${GENERATED_SOURCE_DIR}/code/${FILE_NAME}.h")

	# For some reason this is needed...
	GET_FILENAME_COMPONENT(DIRECTORY_PATH ${OUTPUT} PATH)
	FILE(MAKE_DIRECTORY ${DIRECTORY_PATH})

	get_filename_component(FILENAME ${file} NAME)

	STRING(REPLACE "-" "_" FILENAME ${FILENAME})
	STRING(REPLACE "." "_" FILENAME ${FILENAME})
	STRING(REPLACE "#" "_" FILENAME ${FILENAME})
	
	ADD_CUSTOM_COMMAND(
		OUTPUT ${OUTPUT}
		COMMAND escaper "${file}" "${OUTPUT}" "Default_${FILENAME}"
		DEPENDS ${file}
		COMMENT "Generating string file for ${file}"
		)
	
	LIST(APPEND DEF_OUT_FILES ${OUTPUT})
ENDFOREACH(file ${file_root_def_files})

SOURCE_GROUP("Generated Files\\Default Files" FILES ${DEF_OUT_FILES})

SET(VOICE_REC_FILES)
IF(FSO_USE_VOICEREC)
	ADD_DEFINITIONS(-DFS2_VOICER)
	
	SET(SOUND_DIR "${CMAKE_CURRENT_SOURCE_DIR}/sound")
	SET(VOICE_REC_FILES
		"${GENERATED_SOURCE_DIR}/code/sound/grammar.h"
		"${GENERATED_SOURCE_DIR}/code/sound/phrases.cfg")
	
	ADD_CUSTOM_COMMAND(
		OUTPUT ${VOICE_REC_FILES}
		COMMAND "${SOUND_DIR}/gc.exe" "/h" "${GENERATED_SOURCE_DIR}/code/sound/grammar.h" "${SOUND_DIR}/phrases.xml"
		DEPENDS "${SOUND_DIR}/phrases.xml"
		COMMENT "Compiling voice recognition files"
		)

	SOURCE_GROUP("Generated Files\\Voice Recognition files" FILES ${DEF_OUT_FILES})
ENDIF(FSO_USE_VOICEREC)

ADD_LIBRARY(code ${file_root} ${DEF_OUT_FILES} ${VOICE_REC_FILES})

set_target_properties(code PROPERTIES
	COMPILE_DEFINITIONS_RELEASE "NDEBUG"
	COMPILE_DEFINITIONS_DEBUG "_DEBUG"
)

IF(MSVC)
	set_target_properties(code PROPERTIES
		COMPILE_DEFINITIONS_DEBUG "_DEBUG;PDB_DEBUGGING=1;_HAS_ITERATOR_DEBUGGING=0"
	)
ENDIF(MSVC)

IF (FSO_USE_SPEECH)
	INCLUDE_DIRECTORIES(${SPEECH_INCLUDE_DIRS})
	ADD_DEFINITIONS(-DFS2_SPEECH)
ENDIF(FSO_USE_SPEECH)

INCLUDE_DIRECTORIES(${COMPILER_INCLUDES})
INCLUDE_DIRECTORIES(${PLATFORM_INCLUDES})
INCLUDE_DIRECTORIES(${OPENAL_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${VORBIS_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${LUA_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${CODE_HEADERS})
INCLUDE_DIRECTORIES(${FREESPACE_HEADERS})
INCLUDE_DIRECTORIES(${OGG_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${VORBIS_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${VORBISFILE_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${THEORA_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${GENERATED_SOURCE_DIR})
INCLUDE_DIRECTORIES(${GENERATED_SOURCE_DIR}/code)

# Headers for standalone "gui" on UNIX
IF(UNIX)
	INCLUDE_DIRECTORIES(Freespace2 ${JANSSON_INCLUDE_DIR})
	INCLUDE_DIRECTORIES(Freespace2 ${MONGOOSE_INCLUDE_DIR})
ENDIF(UNIX)
